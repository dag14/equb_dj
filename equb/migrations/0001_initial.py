# Generated by Django 5.2.5 on 2025-08-11 11:31

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EqubGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('started', 'Started'), ('completed', 'Completed')], default='pending', max_length=10)),
                ('contribution_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_cycles', models.PositiveIntegerField()),
                ('current_cycle', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('rotation_rule', models.CharField(choices=[('random', 'Random'), ('sequential', 'Sequential'), ('custom', 'Custom')], default='random', help_text='Defines the payout rotation logic for the Equb group', max_length=20)),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Equb Groups',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GroupMember',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('group_admin', 'Group Admin'), ('member', 'Member')], default='member', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('left', 'Left'), ('removed', 'Removed')], default='active', max_length=20)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='equb.equbgroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['joined_at'],
            },
        ),
        migrations.CreateModel(
            name='Contribution',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('cycle_number', models.PositiveIntegerField(help_text='Which payout cycle this contribution belongs to.')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The contribution amount for this cycle.', max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('late', 'Late'), ('missed', 'Missed')], default='pending', max_length=10)),
                ('payment_date', models.DateTimeField(blank=True, help_text='When the payment was actually made.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recorded_by', models.ForeignKey(blank=True, help_text='User who recorded this payment, if applicable.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_contributions', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contributions', to='equb.equbgroup')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contributions', to='equb.groupmember')),
            ],
            options={
                'ordering': ['group', 'cycle_number', 'member'],
            },
        ),
        migrations.CreateModel(
            name='PayoutSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cycle_number', models.PositiveIntegerField(help_text='Cycle number matching the contribution cycle.')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Total payout amount for this cycle.', max_digits=10)),
                ('scheduled_date', models.DateField(help_text='Planned payout date for this cycle.')),
                ('actual_date', models.DateField(blank=True, help_text='The date payout was actually made.', null=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('paid', 'Paid'), ('delayed', 'Delayed'), ('skipped', 'Skipped')], default='scheduled', max_length=10)),
                ('notes', models.TextField(blank=True, help_text='Optional notes about payout delays or special cases.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payout_schedules', to='equb.equbgroup')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payout_schedules', to='equb.groupmember')),
            ],
            options={
                'ordering': ['group', 'cycle_number'],
            },
        ),
        migrations.CreateModel(
            name='Penalty',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('fixed', 'Fixed amount'), ('percent', 'Percentage of expected amount')], max_length=10)),
                ('value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('computed_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Final penalty amount when applied (stored for audit).', max_digits=10, null=True)),
                ('reason', models.CharField(help_text='Short reason/code', max_length=255)),
                ('notes', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('applied', 'Applied'), ('reversed', 'Reversed')], default='pending', max_length=10)),
                ('applied_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('applied_by', models.ForeignKey(blank=True, help_text='User/system actor who applied/reversed the penalty', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='applied_penalties', to=settings.AUTH_USER_MODEL)),
                ('contribution', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='penalties', to='equb.contribution')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='penalties', to='equb.equbgroup')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='penalties', to='equb.groupmember')),
                ('payout_schedule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='penalties', to='equb.payoutschedule')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddConstraint(
            model_name='groupmember',
            constraint=models.UniqueConstraint(fields=('user', 'group'), name='unique_user_group_membership'),
        ),
        migrations.AddConstraint(
            model_name='contribution',
            constraint=models.UniqueConstraint(fields=('member', 'cycle_number'), name='unique_member_cycle'),
        ),
        migrations.AddConstraint(
            model_name='payoutschedule',
            constraint=models.UniqueConstraint(fields=('group', 'cycle_number'), name='unique_group_cycle_payout'),
        ),
        migrations.AddIndex(
            model_name='penalty',
            index=models.Index(fields=['group', 'member'], name='equb_penalt_group_i_1f090e_idx'),
        ),
        migrations.AddIndex(
            model_name='penalty',
            index=models.Index(fields=['status'], name='equb_penalt_status_92c7cd_idx'),
        ),
    ]
